// <auto-generated />
using System;
using Dr_Purple.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dr_Purple.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Additions.Addition", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<long?>("ContractId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Additions");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Appointments.Appointment", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Appointments.AppointmentMaterial", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<long?>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int?>("MaterialId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<float?>("Quantity")
                        .IsRequired()
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("MaterialId");

                    b.ToTable("AppointmentMaterials");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Appointments.AppointmentPayment", b =>
                {
                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AppointmentId")
                        .HasColumnType("bigint");

                    b.HasKey("PaymentId", "AppointmentId");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("AppointmentPayments");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Appointments.AppointmentServiceTime", b =>
                {
                    b.Property<long?>("ServiceTimeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AppointmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTimeId", "AppointmentId");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("ServiceTimeId")
                        .IsUnique();

                    b.ToTable("AppointmentServiceTimes");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Attends.Attend", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<long?>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Attends");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Contracts.Contract", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndtDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Salary")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SubDepartmentId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubDepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Contracts.ContractService", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<long?>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ContractServices");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Contracts.ContractTime", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<long?>("ContractServiceId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ContractServiceId");

                    b.ToTable("ContractTimes");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Departments.Department", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Departments.SubDepartment", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("SubDepartments");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Departments.SubDepartmentMaterial", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("MaterialId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<float?>("Quantity")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<long?>("SubDepartmentId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("SubDepartmentId");

                    b.ToTable("SubDepartmentMaterials");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Leaves.Leave", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<long?>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Duration")
                        .HasColumnType("real");

                    b.Property<DateTime>("EndtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeaveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Leaves.LeaveBalance", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<float?>("Balance")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<long?>("ContractId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("LeaveBalances");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Materials.Material", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsForSale")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UnitId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Materials.MaterialCostPrice", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaterialId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Price")
                        .IsRequired()
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialCostPrices");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Materials.MaterialSellPrice", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaterialId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Price")
                        .IsRequired()
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialSellPrices");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Materials.Unit", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Offers.Offer", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Discount")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<bool?>("IsPercent")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUnlimited")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Offers.OfferDate", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int?>("OfferId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.ToTable("OfferDates");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Orders.Order", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SubDepartmentId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("WareHouseId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubDepartmentId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Orders.OrderItem", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaterialId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrderId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<float?>("Quantity")
                        .IsRequired()
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Payments.Payment", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<float?>("Amount")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SubDepartmentId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubDepartmentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Payments.PaymentMaterial", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaterialId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PaymentId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<float?>("Quantity")
                        .IsRequired()
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PaymentId");

                    b.ToTable("PaymentMaterials");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Payments.PaymentOffer", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OfferId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long?>("PaymentId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("PaymentId");

                    b.ToTable("PaymentOffers");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Services.Service", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("SubDepartmentId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubDepartmentId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Services.ServiceCostPrice", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<float?>("Cost")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServiceId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceCostPrices");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Services.ServiceTime", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<long?>("ServiceId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceTimes");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Users.Address", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RegionId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Users.City", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Citys");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Users.Region", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<long?>("CityId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Users.User", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.WareHouses.WareHouse", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("WareHouses");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.WareHouses.WareHouseMaterial", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<int?>("MaterialId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<float?>("Quantity")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<long?>("WareHouseId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("WareHouseMaterials");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Additions.Addition", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Contracts.Contract", "Contract")
                        .WithMany("Additions")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Appointments.Appointment", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Users.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Appointments.AppointmentMaterial", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Appointments.Appointment", "Appointment")
                        .WithMany("AppointmentMaterials")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dr_Purple.Domain.Entities.Materials.Material", "Material")
                        .WithMany("AppointmentMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Appointments.AppointmentPayment", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Appointments.Appointment", "Appointment")
                        .WithOne("AppointmentPayment")
                        .HasForeignKey("Dr_Purple.Domain.Entities.Appointments.AppointmentPayment", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dr_Purple.Domain.Entities.Payments.Payment", "Payment")
                        .WithOne("AppointmentPayment")
                        .HasForeignKey("Dr_Purple.Domain.Entities.Appointments.AppointmentPayment", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Appointments.AppointmentServiceTime", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Appointments.Appointment", "Appointment")
                        .WithOne("AppointmentServiceTime")
                        .HasForeignKey("Dr_Purple.Domain.Entities.Appointments.AppointmentServiceTime", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dr_Purple.Domain.Entities.Services.ServiceTime", "ServiceTime")
                        .WithOne("AppointmentServiceTime")
                        .HasForeignKey("Dr_Purple.Domain.Entities.Appointments.AppointmentServiceTime", "ServiceTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("ServiceTime");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Attends.Attend", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Contracts.Contract", "Contract")
                        .WithMany("Attends")
                        .HasForeignKey("ContractId");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Contracts.Contract", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Departments.SubDepartment", "SubDepartment")
                        .WithMany("Contracts")
                        .HasForeignKey("SubDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dr_Purple.Domain.Entities.Users.User", "User")
                        .WithMany("Contracts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubDepartment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Contracts.ContractService", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Contracts.Contract", "Contract")
                        .WithMany("ContractServices")
                        .HasForeignKey("ContractId");

                    b.HasOne("Dr_Purple.Domain.Entities.Services.Service", "Service")
                        .WithMany("ContractServices")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Contract");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Contracts.ContractTime", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Contracts.ContractService", "ContractService")
                        .WithMany("ContractTimes")
                        .HasForeignKey("ContractServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractService");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Departments.SubDepartment", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Departments.Department", "Department")
                        .WithMany("SubDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Departments.SubDepartmentMaterial", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Materials.Material", "Material")
                        .WithMany("SubDepartmentMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dr_Purple.Domain.Entities.Departments.SubDepartment", "SubDepartment")
                        .WithMany("SubDepartmentMaterials")
                        .HasForeignKey("SubDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("SubDepartment");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Leaves.Leave", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Contracts.Contract", "Contract")
                        .WithMany("Leaves")
                        .HasForeignKey("ContractId");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Leaves.LeaveBalance", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Contracts.Contract", "Contract")
                        .WithMany("LeaveBalances")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Materials.Material", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Materials.Unit", "Unit")
                        .WithMany("Materials")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Materials.MaterialCostPrice", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Materials.Material", "Material")
                        .WithMany("MaterialCostPrices")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Materials.MaterialSellPrice", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Materials.Material", "Material")
                        .WithMany("MaterialSellPrices")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Offers.OfferDate", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Offers.Offer", "Offer")
                        .WithMany("OfferDates")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Departments.SubDepartment", "SubDepartment")
                        .WithMany("Orders")
                        .HasForeignKey("SubDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dr_Purple.Domain.Entities.WareHouses.WareHouse", "WareHouse")
                        .WithMany("Orders")
                        .HasForeignKey("SubDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubDepartment");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Orders.OrderItem", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Materials.Material", "Material")
                        .WithMany("OrderItems")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dr_Purple.Domain.Entities.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Payments.Payment", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Departments.SubDepartment", "SubDepartment")
                        .WithMany("Payments")
                        .HasForeignKey("SubDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubDepartment");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Payments.PaymentMaterial", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Materials.Material", "Material")
                        .WithMany("PaymentMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dr_Purple.Domain.Entities.Payments.Payment", "Payment")
                        .WithMany("PaymentMaterials")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Payments.PaymentOffer", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Offers.Offer", "Offer")
                        .WithMany("PaymentOffers")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dr_Purple.Domain.Entities.Payments.Payment", "Payment")
                        .WithMany("PaymentOffers")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Services.Service", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Departments.SubDepartment", "SubDepartment")
                        .WithMany("Services")
                        .HasForeignKey("SubDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubDepartment");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Services.ServiceCostPrice", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Services.Service", "Service")
                        .WithMany("ServiceCostPrices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Services.ServiceTime", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Services.Service", "Service")
                        .WithMany("ServiceTimes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Users.Address", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Users.City", "City")
                        .WithMany("Addresss")
                        .HasForeignKey("CityId");

                    b.HasOne("Dr_Purple.Domain.Entities.Users.Region", "Region")
                        .WithMany("Addresss")
                        .HasForeignKey("RegionId");

                    b.Navigation("City");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Users.Region", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Users.City", "City")
                        .WithMany("Regions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Users.Address", null)
                        .WithMany("Users")
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.WareHouses.WareHouseMaterial", b =>
                {
                    b.HasOne("Dr_Purple.Domain.Entities.Materials.Material", "Material")
                        .WithMany("WareHouseMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dr_Purple.Domain.Entities.WareHouses.WareHouse", "WareHouse")
                        .WithMany("WareHouseMaterials")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Appointments.Appointment", b =>
                {
                    b.Navigation("AppointmentMaterials");

                    b.Navigation("AppointmentPayment");

                    b.Navigation("AppointmentServiceTime");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Contracts.Contract", b =>
                {
                    b.Navigation("Additions");

                    b.Navigation("Attends");

                    b.Navigation("ContractServices");

                    b.Navigation("LeaveBalances");

                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Contracts.ContractService", b =>
                {
                    b.Navigation("ContractTimes");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Departments.Department", b =>
                {
                    b.Navigation("SubDepartments");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Departments.SubDepartment", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Services");

                    b.Navigation("SubDepartmentMaterials");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Materials.Material", b =>
                {
                    b.Navigation("AppointmentMaterials");

                    b.Navigation("MaterialCostPrices");

                    b.Navigation("MaterialSellPrices");

                    b.Navigation("OrderItems");

                    b.Navigation("PaymentMaterials");

                    b.Navigation("SubDepartmentMaterials");

                    b.Navigation("WareHouseMaterials");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Materials.Unit", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Offers.Offer", b =>
                {
                    b.Navigation("OfferDates");

                    b.Navigation("PaymentOffers");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Payments.Payment", b =>
                {
                    b.Navigation("AppointmentPayment");

                    b.Navigation("PaymentMaterials");

                    b.Navigation("PaymentOffers");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Services.Service", b =>
                {
                    b.Navigation("ContractServices");

                    b.Navigation("ServiceCostPrices");

                    b.Navigation("ServiceTimes");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Services.ServiceTime", b =>
                {
                    b.Navigation("AppointmentServiceTime");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Users.Address", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Users.City", b =>
                {
                    b.Navigation("Addresss");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Users.Region", b =>
                {
                    b.Navigation("Addresss");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Dr_Purple.Domain.Entities.WareHouses.WareHouse", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("WareHouseMaterials");
                });
#pragma warning restore 612, 618
        }
    }
}
